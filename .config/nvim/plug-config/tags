!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/bytedance/.config/nvim/plug-config/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$FZF_DEFAULT_OPTS	fzf.vim	/^let $FZF_DEFAULT_OPTS="--preview-window 'up:60%'$/;"	variable
<C-p>	fzf.vim	/^nnoremap <C-p> <Esc>:call <SID>FzfWithMRU('')<CR>$/;"	map
<M-f>	fzf.vim	/^nnoremap <silent> <M-f> :<C-u>RG<CR>$/;"	map
<M-h>	coc.vim	/^inoremap <expr> <M-h> CocActionAsync('showSignatureHelp')$/;"	map
<M-p>	fzf.vim	/^nnoremap <silent> <M-p> :<C-u>Commands<CR>$/;"	map
<TAB>	coc.vim	/^inoremap <silent><expr> <TAB>$/;"	map
<c-@>	coc.vim	/^    inoremap <silent><expr> <c-@> coc#refresh()$/;"	map
<c-space>	coc.vim	/^    inoremap <silent><expr> <c-space> coc#refresh()$/;"	map
<cr>	coc.vim	/^    inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	map
<cr>	coc.vim	/^    inoremap <expr> <cr> pumvisible() ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	map
<leader>a	coc.vim	/^nmap <leader>a <Plug>(coc-codeaction-selected)$/;"	map
<leader>a	coc.vim	/^vmap <leader>a <Plug>(coc-codeaction-selected)$/;"	map
<leader>e	nerdtree.vim	/^nmap <leader>e :NERDTreeToggle<CR>$/;"	map
<leader>f	coc.vim	/^nmap <leader>f <Plug>(coc-format-selected)$/;"	map
<leader>f	coc.vim	/^xmap <leader>f <Plug>(coc-format-selected)$/;"	map
<leader>glo	fugitive.vim	/^nnoremap <silent> <leader>glo <Esc>:Git log --name-only<CR>$/;"	map
<leader>gs	fugitive.vim	/^nnoremap <silent> <leader>gs <Esc>:Git<CR>$/;"	map
<leader>rn	coc.vim	/^nmap <leader>rn <Plug>(coc-rename)$/;"	map
<leader>s	fzf.vim	/^nnoremap <leader>s :set operatorfunc=<SID>RgOperator<cr>g@$/;"	map
<leader>s	fzf.vim	/^vnoremap <leader>s :<c-u>call <SID>RgOperator(visualmode())<cr>$/;"	map
<leader>ss	nerdtree.vim	/^nmap <leader>ss :TagbarToggle<CR>$/;"	map
<leader>sw	fzf.vim	/^nnoremap <silent> <leader>sw :<C-u>execute "RG " . <SID>EscapeRgRegexChars(expand('<cWORD>'))<CR/;"	map
<space>a	coc.vim	/^nmap <space>a  <Plug>(coc-codeaction-cursor)$/;"	map
<space>eb	coc.vim	/^nnoremap <space>eb :CocCommand explorer --preset buffer<CR>$/;"	map
<space>ec	coc.vim	/^nnoremap <space>ec :CocCommand explorer --root-strategies sourceBuffer<CR>$/;"	map
<space>ed	coc.vim	/^nnoremap <space>ed :CocCommand explorer --preset .vim<CR> $/;"	map
<space>ee	coc.vim	/^nnoremap <space>ee :CocCommand explorer<CR>$/;"	map
<space>ef	coc.vim	/^nnoremap <space>ef :CocCommand explorer --preset floating<CR>$/;"	map
<space>el	coc.vim	/^nnoremap <space>el :CocList explPresets"$/;"	map
<space>f	coc.vim	/^nmap <space>f  <Plug>(coc-format)$/;"	map
<space>f	coc.vim	/^nnoremap <space>f :<C-u>call CocActionAsync('showSignatureHelp')<CR>$/;"	map
<space>tc	coc.vim	/^nnoremap <space>tc :<C-u>CocList outline<CR>$/;"	map
<space>tt	coc.vim	/^nnoremap <space>tt :<C-u>CocList --interactive --auto-preview symbols<CR>$/;"	map
FormatBuffer	coc.vim	/^command! -nargs=0 FormatBuffer :silent! call CocAction('format')$/;"	command
FormatSave	coc.vim	/^augroup FormatSave$/;"	augroup
GitGutterNextHunkCycle	gitgutter.vim	/^function! GitGutterNextHunkCycle()$/;"	function
GitGutterPrevHunkCycle	gitgutter.vim	/^function! GitGutterPrevHunkCycle()$/;"	function
HoldHighlight	coc.vim	/^augroup HoldHighlight$/;"	augroup
K	coc.vim	/^nnoremap <silent> K  :call <SID>show_documentation()<CR>$/;"	map
NERDTreeHighlightFile	nerdtree.vim	/^function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)$/;"	function
OpenExplorerWhenStart	coc.vim	/^augroup OpenExplorerWhenStart$/;"	augroup
QuitExplorerWhenLast	coc.vim	/^augroup QuitExplorerWhenLast$/;"	augroup
RG	fzf.vim	/^command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)$/;"	command
ReloadCoc	coc.vim	/^augroup ReloadCoc$/;"	augroup
RipgrepFzf	fzf.vim	/^function! RipgrepFzf(query, fullscreen)$/;"	function
SetRainbowParentheses	misc.vim	/^    augroup SetRainbowParentheses$/;"	augroup
VimHardMode	misc.vim	/^augroup VimHardMode$/;"	augroup
[c	gitgutter.vim	/^nmap [c :<C-u>call GitGutterPrevHunkCycle()<CR>$/;"	map
[g	coc.vim	/^nmap <silent> [g <Plug>(coc-diagnostic-prev)$/;"	map
]c	gitgutter.vim	/^nmap ]c :<C-u>call GitGutterNextHunkCycle()<CR>$/;"	map
]g	coc.vim	/^nmap <silent> ]g <Plug>(coc-diagnostic-next)$/;"	map
b:highlightedyank_highlight_duration	misc.vim	/^let b:highlightedyank_highlight_duration = 500$/;"	variable
g:AutoPairsShortcutToggle	misc.vim	/^let g:AutoPairsShortcutToggle = ''$/;"	variable
g:HardMode_level	misc.vim	/^let g:HardMode_level='wannabe'$/;"	variable
g:NERDCommentEmptyLines	misc.vim	/^let g:NERDCommentEmptyLines      = 1$/;"	variable
g:NERDCompactSexyComs	misc.vim	/^let g:NERDCompactSexyComs        = 1$/;"	variable
g:NERDDefaultAlign	misc.vim	/^let g:NERDDefaultAlign           = 'left'$/;"	variable
g:NERDSpaceDelims	misc.vim	/^let g:NERDSpaceDelims            = 1$/;"	variable
g:NERDToggleCheckAllLines	misc.vim	/^let g:NERDToggleCheckAllLines    = 1$/;"	variable
g:NERDTreeDirArrowCollapsible	nerdtree.vim	/^let g:NERDTreeDirArrowCollapsible = '-'$/;"	variable
g:NERDTreeDirArrowExpandable	nerdtree.vim	/^let g:NERDTreeDirArrowExpandable = '+'$/;"	variable
g:NERDTreeHijackNetrw	nerdtree.vim	/^let g:NERDTreeHijackNetrw=0$/;"	variable
g:NERDTreeNodeDelimiter	nerdtree.vim	/^let g:NERDTreeNodeDelimiter="\\x07"$/;"	variable
g:NERDTreeShowHidden	nerdtree.vim	/^let g:NERDTreeShowHidden=1$/;"	variable
g:NERDTrimTrailingWhitespace	misc.vim	/^let g:NERDTrimTrailingWhitespace = 1$/;"	variable
g:airline#extensions#tabline#enabled	misc.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	variable
g:airline#extensions#tabline#formatter	misc.vim	/^let g:airline#extensions#tabline#formatter = 'unique_tail'$/;"	variable
g:airline_powerline_fonts	misc.vim	/^let g:airline_powerline_fonts = 1$/;"	variable
g:airline_theme	misc.vim	/^let g:airline_theme='bubblegum'$/;"	variable
g:coc_global_extensions	coc.vim	/^let g:coc_global_extensions = [$/;"	variable
g:coc_snippet_next	coc.vim	/^let g:coc_snippet_next = '<tab>'$/;"	variable
g:coc_snippet_prev	coc.vim	/^let g:coc_snippet_prev = '<S-tab>'$/;"	variable
g:cpp_class_decl_highlight	misc.vim	/^let g:cpp_class_decl_highlight            = 1$/;"	variable
g:cpp_class_scope_hightlist	misc.vim	/^let g:cpp_class_scope_hightlist           = 1$/;"	variable
g:cpp_concepts_highlight	misc.vim	/^let g:cpp_concepts_highlight = 1$/;"	variable
g:cpp_experimental_template_highlight	misc.vim	/^let g:cpp_experimental_template_highlight = 1$/;"	variable
g:cpp_member_variable_highlight	misc.vim	/^let g:cpp_member_variable_highlight       = 1$/;"	variable
g:cpp_posix_standard	misc.vim	/^let g:cpp_posix_standard                  = 1$/;"	variable
g:fzf_layout	fzf.vim	/^let g:fzf_layout = { 'window' : { 'width' : 0.7, 'height' : 0.8 } }$/;"	variable
g:fzf_tags_command	fzf.vim	/^let g:fzf_tags_command = 'ctags -R --fields=Kts'$/;"	variable
g:gitgutter_sign_added	gitgutter.vim	/^let g:gitgutter_sign_added = '*'$/;"	variable
g:gitgutter_sign_modified	gitgutter.vim	/^let g:gitgutter_sign_modified = '@'$/;"	variable
g:gitgutter_sign_modified_removed	gitgutter.vim	/^let g:gitgutter_sign_modified_removed = '-'$/;"	variable
g:gitgutter_sign_removed	gitgutter.vim	/^let g:gitgutter_sign_removed = '>'$/;"	variable
g:gitgutter_sign_removed_above_and_below	gitgutter.vim	/^let g:gitgutter_sign_removed_above_and_below = '>'$/;"	variable
g:highlightedyank_highlight_duration	misc.vim	/^let g:highlightedyank_highlight_duration = 500$/;"	variable
g:rainbow#blacklist	misc.vim	/^    let g:rainbow#blacklist = [233,234,235,238,248,59]$/;"	variable
g:rainbow#pairs	misc.vim	/^    let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]$/;"	variable
g:rooter_change_directory_for_non_project_files	misc.vim	/^let g:rooter_change_directory_for_non_project_files = 'current'$/;"	variable
g:syntastic_always_populate_loc_list	misc.vim	/^    let g:syntastic_always_populate_loc_list = 1$/;"	variable
g_syntastic_auto_loc_list	misc.vim	/^    let g_syntastic_auto_loc_list            = 1$/;"	variable
g_syntastic_check_on_open	misc.vim	/^    let g_syntastic_check_on_open            = 1$/;"	variable
g_syntastic_check_on_wq	misc.vim	/^    let g_syntastic_check_on_wq              = 0$/;"	variable
ga	misc.vim	/^nmap ga <Plug>(EasyAlign)$/;"	map
ga	misc.vim	/^xmap ga <Plug>(EasyAlign)$/;"	map
gd	coc.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	map
gh	coc.vim	/^nnoremap <silent> gh :call CocActionAsync('doHover')<CR>$/;"	map
gi	coc.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	map
gr	coc.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	map
gy	coc.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	map
rainbow_blacklist	misc.vim	/^    let rainbow_blacklist = ['vimwiki', 'md', 'cmake']$/;"	variable
s:EscapeRgRegexChars	fzf.vim	/^function! s:EscapeRgRegexChars(input)$/;"	function
s:FzfWithMRU	fzf.vim	/^function! s:FzfWithMRU(path)$/;"	function
s:IsInGitRepo	fzf.vim	/^function! s:IsInGitRepo()$/;"	function
s:RgOperator	fzf.vim	/^function! s:RgOperator(type)$/;"	function
s:check_back_space	coc.vim	/^function! s:check_back_space() abort$/;"	function
s:show_documentation	coc.vim	/^function! s:show_documentation()$/;"	function
